import { MachineService } from '../../application/services/machine.service.js'
import { InMemoryMachineRepository } from '../../infrastructure/repositories/machine.repository.js'
import { Status } from '../../domain/value-objects.js'

export async function testMachineCRUD() {
    // üèóÔ∏è ARCHITECTURE: Demostraci√≥n de capas - Repository ‚Üí Service
    console.log('üèóÔ∏è Inicializando capas de arquitectura...')
    const machineRepository = new InMemoryMachineRepository()
    const machineService = new MachineService(machineRepository)
    console.log('‚úÖ Repository (Infrastructure) ‚Üí Service (Application) inicializados')

    return testMachineOperations(machineService)
}

async function testMachineOperations(machineService: MachineService) {
    console.log('\n========================================')
    console.log('üèãÔ∏è‚Äç‚ôÇÔ∏è TESTING MACHINE CRUD OPERATIONS')
    console.log('========================================')

    try {
        // CREATE - Crear nueva m√°quina
        console.log('\n--- üìù CREATE: Creando nueva m√°quina ---')
        const newMachine = await new Promise((resolve, reject) => {
            machineService.createMachine({
                name: "Cinta de Correr Pro",
                description: "Cinta de correr profesional con inclinaci√≥n autom√°tica",
                specialities: [
                    { id: "1", name: "Cardio", description: "Ejercicios cardiovasculares" }
                ],
                createdAt: new Date(),
                status: Status.ACTIVE,
                imageUrl: "https://example.com/treadmill.jpg",
                room: [{ id: "1", name: "Sala Cardio", description: "√Årea de ejercicios cardiovasculares", location: "Planta baja", capacity: 20 }]
            }, (error, result) => {
                if (error) reject(error)
                else resolve(result)
            })
        })
        console.log('‚úÖ M√°quina creada exitosamente con ID:', newMachine)

        // READ - Obtener m√°quina por ID
        console.log('\n--- üëÄ READ: Obteniendo m√°quina por ID ---')
        const retrievedMachine = await machineService.getMachineById(newMachine as string)
        if (retrievedMachine) {
            console.log('‚úÖ M√°quina encontrada:', {
                id: retrievedMachine.id,
                name: retrievedMachine.name,
                specialities: retrievedMachine.specialities.map(s => s.name),
                status: retrievedMachine.status
            })
        } else {
            console.log('‚ùå M√°quina no encontrada')
        }

        // READ ALL - Obtener todas las m√°quinas
        console.log('\n--- üìã READ ALL: Obteniendo todas las m√°quinas ---')
        const allMachines = await machineService.getAllMachines()
        console.log(`‚úÖ Total de m√°quinas encontradas: ${allMachines.length}`)
        allMachines.forEach((machine, index) => {
            const specialitiesText = machine.specialities.map(s => s.name).join(', ')
            console.log(`   ${index + 1}. ${machine.name} (${specialitiesText}) - ${machine.status}`)
        })

        // UPDATE - Actualizar m√°quina
        console.log('\n--- ‚úèÔ∏è UPDATE: Actualizando datos de la m√°quina ---')
        const updatedMachine = await machineService.updateMachine(newMachine as string, {
            name: "Cinta de Correr Pro Max",
            description: "Cinta de correr profesional con inclinaci√≥n autom√°tica y programas personalizados",
            status: Status.MAINTENANCE,
            updatedAt: new Date()
        })
        if (updatedMachine) {
            console.log('‚úÖ M√°quina actualizada exitosamente:', {
                name: updatedMachine.name,
                status: updatedMachine.status,
                updatedAt: updatedMachine.updatedAt?.toLocaleDateString()
            })
        } else {
            console.log('‚ùå Error al actualizar m√°quina')
        }

        // DELETE - Eliminar m√°quina
        console.log('\n--- üóëÔ∏è DELETE: Eliminando m√°quina ---')
        const deleteResult = await machineService.deleteMachine(newMachine as string)
        if (deleteResult) {
            console.log('‚úÖ M√°quina eliminada exitosamente')
        } else {
            console.log('‚ùå Error al eliminar m√°quina')
        }

        // VERIFICAR DELETE - Confirmar eliminaci√≥n
        console.log('\n--- üîç VERIFY DELETE: Verificando eliminaci√≥n ---')
        const deletedMachine = await machineService.getMachineById(newMachine as string)
        if (deletedMachine === null) {
            console.log('‚úÖ Confirmado: M√°quina eliminada correctamente')
        } else {
            console.log('‚ùå Error: M√°quina a√∫n existe en la base de datos')
        }

        console.log('\n‚úÖ MACHINE CRUD TEST COMPLETADO EXITOSAMENTE')

    } catch (error) {
        console.error('\n‚ùå ERROR EN MACHINE CRUD TEST:', error)
    }

    console.log('========================================\n')
}